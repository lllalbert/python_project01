##***************************************************************
## ** 所属主题: 用户画像
## ** 功能描述:
## ** 创建者  : lq@kidneytec.com
## ** 创建日期: 20220920
## ** 修改日志:
## ** 修改日期:
import json

from odps import ODPS, options
from odps.df import DataFrame
import pandas as pd
import time
from datetime import datetime
# import numpy as np
import traceback
import math
import uuid
from multiprocessing.dummy import Pool as ThreadPool

datetime_format = '%Y-%m-%d %H:%M:%S'
page_size=1000;
options.tunnel.use_instance_tunnel = True;
options.tunnel.limit_instance_tunnel = False;

in_table_name_pid = "dim_patient_info_all"

# 静态分析
in_table_static_status = "dws_pl_user_static_status_info_all"

# app行为分析
in_table_app_status = "dws_pl_user_app_status_info_all"
in_table_app_open = "ads_pl_user_app_open_period_all"

# 沟通行为分析
in_table_dialog_count = "dws_pl_dialog_message_service_all"
in_table_dialog_status = "dws_pl_dialog_pat_status_all"

# 社区行为分析
in_table_post_count = "ads_pl_sq_post_interaction_count_period_all"
in_table_post_prefer = "ads_pl_sq_post_interaction_prefer_period_all"
in_table_article_count = "ads_pl_sq_article_interaction_count_period_all"
in_table_article_prefer = "ads_pl_sq_article_interaction_prefer_period_all"
in_table_content_prefer = "ads_pl_sq_content_prefer_period_all"

# 消费行为分析
in_table_consume_count = "ads_pl_consume_frequency_period_all"
in_table_consume_status = "dws_pl_consume_status_info_all"

# 总用户人数
out_table_name = "ads_pl_user_paintings_all_1"


def main():
    # odf_pid = DataFrame(odps.get_table(in_table_name_pid))
    # pdf_pid = odf_pid.to_pandas()

    odf_static_status = DataFrame(odps.get_table(in_table_static_status))
    pdf_static_status = odf_static_status.to_pandas()

    pool = ThreadPool()
    results = pool.map(static_status, item_list)
    pool.close()
    pool.join()

    # grouped = pdf_pid.groupby('pid')
    i = 0
    # 计算
    src_sql = f'''select pid from {in_table_name_pid} '''
    total_count = get_record_total_count(src_sql)
    total_page = math.ceil(int(total_count) / page_size)
    delete_odps()
    for page_index in range(0, total_page):
        result = list()
        page_sql = f"{src_sql} limit {page_index * page_size}, {page_size}"
        with odps.execute_sql(page_sql).open_reader() as reader:
            for record in reader:
                i = i + 1
                print("循环第" + str(i) + "次")
                records = list()
                static_records = static_status(record.pid, pdf_static_status)
                if static_records is not None:
                    records.append([
                        record.pid,
                        static_records,
                        None,
                        None,
                        None,
                        None,
                        None,
                        time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()),
                        time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
                    ])
                    result.extend(records)
            writer_odps(result, page_index)


def static_status(pid, pdf_status):
    status_dict = {"gender": None,
                   "age_group_code": None,
                   "height": None,
                   "weight": None,
                   "bmi": None,
                   "area_province": None,
                   "register_time": None,
                   "product_code": None,
                   "ckd_code": None
                   }
    for item_status in pdf_status[(pdf_status['pid'] == pid)].itertuples():
        status_dict['gender'] = item_status.gender
        status_dict['age_group_code'] = item_status.age_group_code
        status_dict['area_province'] = item_status.area_province
        status_dict['register_time'] = item_status.register_time
        status_dict['product_code'] = item_status.product_code
        status_dict['ckd_code'] = item_status.ckd_code
        if item_status.height is not None and item_status.height is not "NaN":
            status_dict['height'] = float(item_status.height)
        if item_status.weight is not None and item_status.weight is not "NaN":
            status_dict['weight'] = float(item_status.weight)
        if item_status.bmi is not None and item_status.bmi is not "NaN":
            status_dict['bmi'] = float(item_status.bmi)
    return json.dumps(status_dict)


def get_record_total_count(src_sql):
    total_count_sql = f"select count(1) count from ({src_sql})"
    with odps.execute_sql(total_count_sql).open_reader() as reader:
        if reader.count > 0:
            return reader[0].count
        return 0


def writer_odps(result,page_index):
    """
    写入数据
    :return:
    """
    # dt = datetime.strptime(next_dt,'%Y%m%d').strftime('%Y%m%d')
    # table = odps.get_table(out_table_name)
    # table.delete_partition(f'dt={dt}', if_exists=True)
    if len(result) > 0:
        odps.write_table(out_table_name, result)
        print(f'分页数据写入完毕:{page_index},数据条数为：{len(result)}')
        print(f'入库完成{len(result)}')
    if len(result) == 0:
        print('入库失败没有数据')


def delete_odps():
    odps.delete_table(out_table_name, if_exists=True)
    print("已删除表")
    odps.create_table(out_table_name,
                              'pid string, static_status string, dialog_message_analyses string, app_use_analyses string, consume_behavior_analyses string, sq_behavior_analyses string, yl_behavior_analyses string, ods_rksj string, ods_update string',
                              if_not_exists=True)
    print("已创建表")


if __name__ == "__main__":
    # main(args['next_dt'])
    main()
